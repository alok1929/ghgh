import numpy as np
from sympy import *
from math import *
from matplotlib import pyplot as plt
from sympy import*
x , y = symbols ('x y')
p1 = plot_implicit ( Eq ( x ** 2 + y ** 2 , 4 ) ,(x ,-4 , 4 ) ,(y ,-4 , 4 ) ,title = 'Circle : 
	$x^2+y^2=4$ ') # r= 2

def cycloid (r):
    x = [] # create the list of x coordinates
    y = [] # create the list of y coordinates
    for theta in np. linspace (-2*np.pi , 2*np.pi , 100):
            x. append (r*( theta - np.sin( theta )))
             y. append (r*(1 - np.cos( theta ))) # same for y
    plt. plot (x,y)
    plt. show () 
cycloid (2) 

rho =(r ** 2+r1 ** 2) ** (1.5)/(r ** 2+2*r1 ** 2-r*r2); 
rho1 = rho . subs (t,pi/2) # substitute t in rho
print ('The radius of curvature is %3.4f units '% rho1 )

from sympy import *
rho, phi, theta=symbols('rho, phi, theta') 
x=rho*cos(phi)*sin(theta)
y=rho*cos(phi)*cos(theta)
z=rho*sin(phi)
A=Matrix([x,y,z])
jacA=A.jacobian([rho, phi, theta])
jacobian=simplify(det(jacA)) 
print('jacobian(A)=')
display(jacobian)

import numpy as np
def normalize (x):
    fac = abs(x).max ()
    x_n = x / x.max ()
    return fac , x_n
x = np. array ([1, 1,1])
a = np. array ([[1,1,3 ],[1,5,1],[3,1,1]])
for i in range (10):
    x = np.dot(a, x)
    lambda_1 , x = normalize (x)
print ('Eigenvalue :', lambda_1 )
print (' Eigenvector :', x)

def gcd1 (a,b):
        c = 1 
         if b < a:
   t = b 
   b = a
    a = t
    while (c > 0): 
            c = b%a
             print (a,c)
             b = a
              a = c
              continue 
print ('GCD =',b)
